"use strict";(self.webpackChunkreifydb_docs=self.webpackChunkreifydb_docs||[]).push([[92],{2244:(e,n,s)=>{s.d(n,{R:()=>l,x:()=>c});var i=s(9729);const t={},r=i.createContext(t);function l(e){const n=i.useContext(r);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),i.createElement(r.Provider,{value:n},e.children)}},9481:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>h,frontMatter:()=>l,metadata:()=>i,toc:()=>a});const i=JSON.parse('{"id":"core-concepts/data-types","title":"Data Types","description":"ReifyDB supports a comprehensive set of data types to handle various kinds of data efficiently.","source":"@site/docs/core-concepts/data-types.md","sourceDirName":"core-concepts","slug":"/core-concepts/data-types","permalink":"/docs/core-concepts/data-types","draft":false,"unlisted":false,"editUrl":"https://github.com/reifydb/reifydb/tree/main/docs/docs/core-concepts/data-types.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Architecture","permalink":"/docs/core-concepts/architecture"},"next":{"title":"RQL","permalink":"/docs/category/rql"}}');var t=s(5813),r=s(2244);const l={sidebar_position:2},c="Data Types",d={},a=[{value:"Numeric Types",id:"numeric-types",level:2},{value:"Integer Types",id:"integer-types",level:3},{value:"Floating-Point Types",id:"floating-point-types",level:3},{value:"String Types",id:"string-types",level:2},{value:"Date and Time Types",id:"date-and-time-types",level:2},{value:"Boolean Type",id:"boolean-type",level:2},{value:"Binary Types",id:"binary-types",level:2},{value:"JSON Types",id:"json-types",level:2},{value:"Array Types",id:"array-types",level:2},{value:"Type Casting",id:"type-casting",level:2},{value:"NULL Values",id:"null-values",level:2}];function o(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"data-types",children:"Data Types"})}),"\n",(0,t.jsx)(n.p,{children:"ReifyDB supports a comprehensive set of data types to handle various kinds of data efficiently."}),"\n",(0,t.jsx)(n.h2,{id:"numeric-types",children:"Numeric Types"}),"\n",(0,t.jsx)(n.h3,{id:"integer-types",children:"Integer Types"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"INTEGER"}),": 32-bit signed integer (-2,147,483,648 to 2,147,483,647)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"BIGINT"}),": 64-bit signed integer"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"SMALLINT"}),": 16-bit signed integer (-32,768 to 32,767)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"TINYINT"}),": 8-bit signed integer (-128 to 127)"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"floating-point-types",children:"Floating-Point Types"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"REAL"}),": 32-bit floating point"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"DOUBLE"}),": 64-bit floating point"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"DECIMAL(p,s)"}),": Fixed-point decimal with precision p and scale s"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"string-types",children:"String Types"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"TEXT"}),": Variable-length character string"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"VARCHAR(n)"}),": Variable-length string with maximum length n"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"CHAR(n)"}),": Fixed-length string of length n"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"date-and-time-types",children:"Date and Time Types"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"DATE"}),": Calendar date (year, month, day)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"TIME"}),": Time of day (hour, minute, second, microsecond)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"TIMESTAMP"}),": Date and time with timezone"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"INTERVAL"}),": Time interval"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"boolean-type",children:"Boolean Type"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"BOOLEAN"}),": True or false value"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"binary-types",children:"Binary Types"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"BLOB"}),": Binary large object"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"BYTEA"}),": Variable-length binary string"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"json-types",children:"JSON Types"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"JSON"}),": JSON text storage"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"JSONB"}),": Binary JSON storage (more efficient)"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"array-types",children:"Array Types"}),"\n",(0,t.jsx)(n.p,{children:"ReifyDB supports arrays of any base type:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"CREATE TABLE example (\n  tags TEXT[],\n  scores INTEGER[]\n);\n"})}),"\n",(0,t.jsx)(n.h2,{id:"type-casting",children:"Type Casting"}),"\n",(0,t.jsxs)(n.p,{children:["You can cast between compatible types using the ",(0,t.jsx)(n.code,{children:"CAST"})," function or ",(0,t.jsx)(n.code,{children:"::"})," operator:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"SELECT CAST('123' AS INTEGER);\nSELECT '123'::INTEGER;\n"})}),"\n",(0,t.jsx)(n.h2,{id:"null-values",children:"NULL Values"}),"\n",(0,t.jsxs)(n.p,{children:["All data types can store NULL values unless explicitly constrained with ",(0,t.jsx)(n.code,{children:"NOT NULL"}),"."]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(o,{...e})}):o(e)}}}]);