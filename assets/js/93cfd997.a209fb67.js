"use strict";(self.webpackChunkreifydb_docs=self.webpackChunkreifydb_docs||[]).push([[7857],{1805:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>u,frontMatter:()=>t,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"advanced/query-optimization","title":"Query Optimization","description":"Learn how to optimize your queries for maximum performance in ReifyDB.","source":"@site/docs/advanced/query-optimization.md","sourceDirName":"advanced","slug":"/advanced/query-optimization","permalink":"/docs/advanced/query-optimization","draft":false,"unlisted":false,"editUrl":"https://github.com/reifydb/reifydb/tree/main/docs/docs/advanced/query-optimization.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"Advanced","permalink":"/docs/category/advanced"},"next":{"title":"API Reference","permalink":"/docs/category/api-reference"}}');var r=i(5813),a=i(2244);const t={sidebar_position:1},l="Query Optimization",o={},d=[{value:"Understanding Query Plans",id:"understanding-query-plans",level:2},{value:"Indexing Strategies",id:"indexing-strategies",level:2},{value:"Creating Indexes",id:"creating-indexes",level:3},{value:"Composite Indexes",id:"composite-indexes",level:3},{value:"Unique Indexes",id:"unique-indexes",level:3},{value:"Query Optimization Tips",id:"query-optimization-tips",level:2},{value:"1. Use Specific Column Names",id:"1-use-specific-column-names",level:3},{value:"2. Optimize JOIN Operations",id:"2-optimize-join-operations",level:3},{value:"3. Use LIMIT for Large Result Sets",id:"3-use-limit-for-large-result-sets",level:3},{value:"4. Avoid Leading Wildcards",id:"4-avoid-leading-wildcards",level:3},{value:"5. Use EXISTS Instead of IN for Subqueries",id:"5-use-exists-instead-of-in-for-subqueries",level:3},{value:"Monitoring Performance",id:"monitoring-performance",level:2},{value:"Query Statistics",id:"query-statistics",level:3},{value:"Slow Query Log",id:"slow-query-log",level:3},{value:"Caching Strategies",id:"caching-strategies",level:2},{value:"Result Caching",id:"result-caching",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Conclusion",id:"conclusion",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"query-optimization",children:"Query Optimization"})}),"\n",(0,r.jsx)(n.p,{children:"Learn how to optimize your queries for maximum performance in ReifyDB."}),"\n",(0,r.jsx)(n.h2,{id:"understanding-query-plans",children:"Understanding Query Plans"}),"\n",(0,r.jsxs)(n.p,{children:["ReifyDB's query optimizer automatically analyzes your queries and chooses the most efficient execution plan. You can view the query plan using the ",(0,r.jsx)(n.code,{children:"EXPLAIN"})," command:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"EXPLAIN SELECT * FROM users WHERE email LIKE '%@example.com';\n"})}),"\n",(0,r.jsx)(n.h2,{id:"indexing-strategies",children:"Indexing Strategies"}),"\n",(0,r.jsx)(n.h3,{id:"creating-indexes",children:"Creating Indexes"}),"\n",(0,r.jsx)(n.p,{children:"Indexes are crucial for query performance. Create indexes on columns frequently used in WHERE, JOIN, and ORDER BY clauses:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"CREATE INDEX idx_users_email ON users(email);\nCREATE INDEX idx_posts_user_id ON posts(user_id);\n"})}),"\n",(0,r.jsx)(n.h3,{id:"composite-indexes",children:"Composite Indexes"}),"\n",(0,r.jsx)(n.p,{children:"For queries filtering on multiple columns, composite indexes can be more efficient:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"CREATE INDEX idx_users_name_email ON users(name, email);\n"})}),"\n",(0,r.jsx)(n.h3,{id:"unique-indexes",children:"Unique Indexes"}),"\n",(0,r.jsx)(n.p,{children:"Use unique indexes to enforce uniqueness and improve lookup performance:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"CREATE UNIQUE INDEX idx_users_email_unique ON users(email);\n"})}),"\n",(0,r.jsx)(n.h2,{id:"query-optimization-tips",children:"Query Optimization Tips"}),"\n",(0,r.jsx)(n.h3,{id:"1-use-specific-column-names",children:"1. Use Specific Column Names"}),"\n",(0,r.jsxs)(n.p,{children:["Instead of using ",(0,r.jsx)(n.code,{children:"SELECT *"}),", specify only the columns you need:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"-- Less efficient\nSELECT * FROM users;\n\n-- More efficient\nSELECT id, name, email FROM users;\n"})}),"\n",(0,r.jsx)(n.h3,{id:"2-optimize-join-operations",children:"2. Optimize JOIN Operations"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Always join on indexed columns"}),"\n",(0,r.jsx)(n.li,{children:"Use appropriate join types (INNER, LEFT, RIGHT)"}),"\n",(0,r.jsx)(n.li,{children:"Filter data before joining when possible"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"-- Efficient join with indexed columns\nSELECT u.name, COUNT(p.id) as post_count\nFROM users u\nINNER JOIN posts p ON u.id = p.user_id\nWHERE p.published = true\nGROUP BY u.id, u.name;\n"})}),"\n",(0,r.jsx)(n.h3,{id:"3-use-limit-for-large-result-sets",children:"3. Use LIMIT for Large Result Sets"}),"\n",(0,r.jsx)(n.p,{children:"When you don't need all results, use LIMIT to reduce data transfer:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"SELECT * FROM posts\nORDER BY created_at DESC\nLIMIT 10;\n"})}),"\n",(0,r.jsx)(n.h3,{id:"4-avoid-leading-wildcards",children:"4. Avoid Leading Wildcards"}),"\n",(0,r.jsx)(n.p,{children:"Leading wildcards in LIKE patterns prevent index usage:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"-- Cannot use index\nSELECT * FROM users WHERE email LIKE '%@example.com';\n\n-- Can use index\nSELECT * FROM users WHERE email LIKE 'john%';\n"})}),"\n",(0,r.jsx)(n.h3,{id:"5-use-exists-instead-of-in-for-subqueries",children:"5. Use EXISTS Instead of IN for Subqueries"}),"\n",(0,r.jsx)(n.p,{children:"For large subqueries, EXISTS is often more efficient:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"-- Using EXISTS (more efficient for large datasets)\nSELECT * FROM users u\nWHERE EXISTS (\n  SELECT 1 FROM posts p \n  WHERE p.user_id = u.id AND p.published = true\n);\n"})}),"\n",(0,r.jsx)(n.h2,{id:"monitoring-performance",children:"Monitoring Performance"}),"\n",(0,r.jsx)(n.h3,{id:"query-statistics",children:"Query Statistics"}),"\n",(0,r.jsx)(n.p,{children:"ReifyDB provides statistics about query performance:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"-- View query statistics\nSELECT * FROM pg_stat_statements\nORDER BY total_time DESC\nLIMIT 10;\n"})}),"\n",(0,r.jsx)(n.h3,{id:"slow-query-log",children:"Slow Query Log"}),"\n",(0,r.jsx)(n.p,{children:"Enable slow query logging to identify problematic queries:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"SET log_min_duration_statement = 1000; -- Log queries taking > 1 second\n"})}),"\n",(0,r.jsx)(n.h2,{id:"caching-strategies",children:"Caching Strategies"}),"\n",(0,r.jsx)(n.h3,{id:"result-caching",children:"Result Caching"}),"\n",(0,r.jsx)(n.p,{children:"ReifyDB automatically caches frequently accessed data. You can also use materialized views for complex queries:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"CREATE MATERIALIZED VIEW user_post_counts AS\nSELECT u.id, u.name, COUNT(p.id) as post_count\nFROM users u\nLEFT JOIN posts p ON u.id = p.user_id\nGROUP BY u.id, u.name;\n\n-- Refresh the materialized view\nREFRESH MATERIALIZED VIEW user_post_counts;\n"})}),"\n",(0,r.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Regular Maintenance"}),": Run ",(0,r.jsx)(n.code,{children:"ANALYZE"})," regularly to update statistics"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Monitor Index Usage"}),": Check which indexes are being used"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Partition Large Tables"}),": Consider partitioning for very large tables"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Use Connection Pooling"}),": Reduce connection overhead"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Batch Operations"}),": Group multiple operations when possible"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,r.jsx)(n.p,{children:"Query optimization is an iterative process. Start with proper indexing, monitor your query performance, and adjust based on actual usage patterns."})]})}function u(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},2244:(e,n,i)=>{i.d(n,{R:()=>t,x:()=>l});var s=i(9729);const r={},a=s.createContext(r);function t(e){const n=s.useContext(a);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:t(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);