"use strict";(self.webpackChunkreifydb_docs=self.webpackChunkreifydb_docs||[]).push([[2671],{2244:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>l});var r=t(9729);const i={},s=r.createContext(i);function a(e){const n=r.useContext(s);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),r.createElement(s.Provider,{value:n},e.children)}},7943:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>u,frontMatter:()=>a,metadata:()=>r,toc:()=>o});const r=JSON.parse('{"id":"api/rust","title":"Rust API","description":"Complete reference for the ReifyDB Rust client.","source":"@site/docs/api/rust.md","sourceDirName":"api","slug":"/api/rust","permalink":"/docs/api/rust","draft":false,"unlisted":false,"editUrl":"https://github.com/reifydb/reifydb/tree/main/docs/docs/api/rust.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"API Reference","permalink":"/docs/api/"},"next":{"title":"FAQ","permalink":"/docs/faq"}}');var i=t(5813),s=t(2244);const a={sidebar_position:1},l="Rust API",c={},o=[{value:"Installation",id:"installation",level:2},{value:"Client",id:"client",level:2},{value:"Creating a Client",id:"creating-a-client",level:3},{value:"Connection Options",id:"connection-options",level:3},{value:"Queries",id:"queries",level:2},{value:"Execute Statements",id:"execute-statements",level:3},{value:"Query Data",id:"query-data",level:3},{value:"Transactions",id:"transactions",level:2},{value:"Prepared Statements",id:"prepared-statements",level:2},{value:"Error Handling",id:"error-handling",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"rust-api",children:"Rust API"})}),"\n",(0,i.jsx)(n.p,{children:"Complete reference for the ReifyDB Rust client."}),"\n",(0,i.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,i.jsxs)(n.p,{children:["Add to your ",(0,i.jsx)(n.code,{children:"Cargo.toml"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-toml",children:'[dependencies]\nreifydb-client = "0.1.0"\ntokio = { version = "1", features = ["full"] }\n'})}),"\n",(0,i.jsx)(n.h2,{id:"client",children:"Client"}),"\n",(0,i.jsx)(n.h3,{id:"creating-a-client",children:"Creating a Client"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-rust",children:'use reifydb_client::Client;\n\nlet client = Client::connect("reifydb://localhost:5432").await?;\n'})}),"\n",(0,i.jsx)(n.h3,{id:"connection-options",children:"Connection Options"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-rust",children:'use reifydb_client::{Client, Config};\n\nlet config = Config::builder()\n    .host("localhost")\n    .port(5432)\n    .user("admin")\n    .password("secret")\n    .database("mydb")\n    .pool_size(10)\n    .build();\n\nlet client = Client::with_config(config).await?;\n'})}),"\n",(0,i.jsx)(n.h2,{id:"queries",children:"Queries"}),"\n",(0,i.jsx)(n.h3,{id:"execute-statements",children:"Execute Statements"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-rust",children:'// DDL statements\nclient.execute("CREATE TABLE users (id INT, name TEXT)").await?;\n\n// DML statements\nlet affected = client.execute("DELETE FROM users WHERE id = 1").await?;\nprintln!("Deleted {} rows", affected);\n'})}),"\n",(0,i.jsx)(n.h3,{id:"query-data",children:"Query Data"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-rust",children:'// Simple query\nlet rows = client.query("SELECT * FROM users").await?;\n\n// Query with parameters\nlet rows = client.query_params(\n    "SELECT * FROM users WHERE age > $1",\n    &[&25]\n).await?;\n\n// Query single row\nlet row = client.query_one("SELECT * FROM users WHERE id = 1").await?;\n'})}),"\n",(0,i.jsx)(n.h2,{id:"transactions",children:"Transactions"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-rust",children:"let mut tx = client.begin().await?;\n\ntx.execute(\"INSERT INTO users (name) VALUES ('Alice')\").await?;\ntx.execute(\"INSERT INTO users (name) VALUES ('Bob')\").await?;\n\n// Commit or rollback\ntx.commit().await?;\n// or\ntx.rollback().await?;\n"})}),"\n",(0,i.jsx)(n.h2,{id:"prepared-statements",children:"Prepared Statements"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-rust",children:'let stmt = client.prepare("SELECT * FROM users WHERE id = $1").await?;\n\nlet row = client.query_one(&stmt, &[&1]).await?;\n'})}),"\n",(0,i.jsx)(n.h2,{id:"error-handling",children:"Error Handling"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-rust",children:'use reifydb_client::{Error, ErrorKind};\n\nmatch client.query("SELECT * FROM users").await {\n    Ok(rows) => process_rows(rows),\n    Err(Error::Connection(e)) => eprintln!("Connection error: {}", e),\n    Err(Error::Query(e)) => eprintln!("Query error: {}", e),\n    Err(e) => eprintln!("Unknown error: {}", e),\n}\n'})})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}}}]);